swagger: "2.0"
info:
  title: Ecommerce Project
  description: This is my Wakeupcoders Ecommerce Project API Documentation
  version: 1.0
  contact:
    email: wakeupcoders@gmail.com
  liscence:
    name: Apache 2.0
    url: "http://www.apache.org/liscences/LIS"
  servers:
    -url: http://localhost:5000
    description: THis is my local Server
    -url: http://example.com/
    description: This is my original URL


securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
schemes:
- "http"
- "https"


definitions:
  User:
    properties:
      id:
        type: integer
      name:
        type: string
    # Both properties are required
    required:  
      - id
      - name
  UserRegister:
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
    # Both properties are required
    required:  
      - name
      - email
      - password
  UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    # Both properties are required
    required:  
      - email
      - password
  Product:
    properties:
      name:
        type: string
      price:
        type: string
      size:
        type: string
      image:
        type: file
    # Both properties are required
    required:  
      - name
      - price
      - size
      - image

#Return Users From get request
paths:
# Admin Module Documentation
  /api/products:
    post:
      tags:
      - "Products Module"
      summary: Creates a new Product
      security:
        - Bearer: []
      consumes:
         - multipart/form-data
      parameters:
        - name: name
          in: formData
          description: name of product
          required: true
          type: string
          
        - name: price
          in: formData
          description: price of product
          required: true
          type: string

        - name: size
          in: formData
          description: Size of Product
          required: true
          type: string

        - name: image
          in: formData
          description: file to upload
          required: true
          type: file
      responses:
        200:
          description: OK
          
    get:
      tags:
      - "Products Module"
      summary: "Returns the products"
      description: ""
      summary: Returns a string.
      description: String Chechup
      parameters:
        - in: query
          name: numPerPage
          schema:
            type: integer
          description: The number of records required per page
        - in: query
          name: page
          schema:
            type: integer
          description: The page number

      responses:
        200:    # status code
          description: Successul Response
          schema: 
            type: string
            example: "Users String"
        400:
          description: User Error
          schema: 
            type: string
            example: "Some Error "      
  /api/products/{productId}:
    get:
      tags:
      - "Products Module"
      summary: "Find product by ID"
      description: "Returns a single Product"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            # $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
    delete:
      tags:
      - "Products Module"
      summary: "Delete a Product"
      description: ""
      operationId: "addPet"
      summary: Returns a string.
      description: String Chechup
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
      security:
        - Bearer: []
      responses:
        200:    # status code
          description: Successul Response
          schema: 
            type: string
            example: "Users String"
        400:
          description: User Error
          schema: 
            type: string
            example: "Some Error "
    put:
      tags:
      - "Products Module"
      summary: "Update an existing Product"
      description: ""
      operationId: "updateProduct"
      consumes:
         - multipart/form-data
      parameters:
        - name: name
          in: formData
          description: name of product
          required: true
          type: string
          
        - name: price
          in: formData
          description: price of product
          required: true
          type: string

        - name: size
          in: formData
          description: Size of Product
          required: true
          type: string

        - name: image
          in: formData
          description: file to upload
          required: true
          type: file
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
   
      produces:
     
      - "application/json"
     
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"

# User Module Documentation
  /api/register:
    post:
      tags:
      - "User Module"
      summary: Creates a new user.
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/UserRegister'
      responses:
        200:
          description: OK
        409:
          description: This email is already taken.
        422:
          description: Mandatory Fields are required
        500:
          description: Internal Server Error
   
  

  /api/login:
    post:
      tags:
      - "User Module"
      summary: User Login after registeration.
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: OK
        401:
          description: Username or password is wrong!
        422:
          description: Mandatory Fields are required
        500:
          description: Internal Server Error